<?xml version="1.0" encoding="utf-8"?>
<BaseComponent xmlns="org.glomaker.shared.component.*" 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	layout="absolute"
	horizontalScrollPolicy="off" verticalScrollPolicy="off"
 	currentState="DisplayState"
 	creationComplete="init()"
 	themeColor="haloSilver" xmlns:mcq="org.glomaker.plugin.mcq.*" xmlns:editbutton="org.glomaker.shared.ui.editbutton.*" xmlns:utils="org.glomaker.shared.component.utils.*">
    
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import org.glomaker.shared.properties.NumericStepperProperty;
			import org.glomaker.shared.properties.ArrayProperty;
			import org.glomaker.shared.properties.IntegerProperty;
			import org.glomaker.shared.properties.IComponentProperty;
			import mx.states.AddChild;
			import mx.core.UIComponent;
			import mx.collections.ArrayCollection;
			import org.glomaker.shared.properties.StringProperty;
			import mx.controls.RadioButton;
			import flash.events.FocusEvent;
			import mx.controls.TextInput;

			/**
			 * Default images embed
			 */
			[Bindable]
			[Embed(source="tick.png")]
			protected var tick:Class;
			
			[Bindable]
			[Embed(source="cross.png")]
			protected var cross:Class;
			
			// ------------------
			// QUIZ PROPERTIES
			// ------------------
 
			protected var _question:StringProperty = new StringProperty("question", "Question:", "Type your question here...");
			public var _correctAnswer:IntegerProperty = new IntegerProperty("correct", "Correct Answer (0, 1, 2, ...)", -1);
			protected var _answers:ArrayProperty = new ArrayProperty("answers", "Answers", []);
			protected var _feedbacks:ArrayProperty = new ArrayProperty("feedbacks", "Feedbacks", []);
			protected var _fontSize:NumericStepperProperty = new NumericStepperProperty("fontSize","Font Size",15);
			protected var _submitTitle:StringProperty = new StringProperty("submit", "Submit", "Submit");

            // currently selected answer
            protected var _currentAnswer:int = -1; 
            
            // User interface panels
            private var feedback:Feedback;
            private var result:Result;
            
            // Used to aid adding feedback
            private var currentIndex:int;
            
            // internal properties
            // these are used to run the actual component
            // the Property values from above are copied into these values in 
            [Bindable]
            protected var currentFontSize:uint;
            
            [Bindable]
            protected var currentQuestion:String;
            
            [Bindable]
            protected var currentSubmitTitle:String;
            
            [Bindable]
            protected var currentCorrectAnswer:int;
            
            [Bindable]
            protected var answerCollection:ArrayCollection;
            
            [Bindable]
            protected var feedbackCollection:ArrayCollection;
            
  			// ------------------
			// METHODS
			// ------------------
			          
            // Initilize
			public function init():void
			{
					
				// Initialize the Feedback panel
				feedback = new Feedback();
				feedback.addEventListener(Feedback.FEEDBACKCHANGED,feedbackChanged, false, 0, true);

				result = new Result();
			}

			
			override protected function defineProperties():void
			{
				super.defineProperties();
			
				// add quiz properties (no binding - this will take place in the state transition handlers)
				addSaveableProperty(_question);
				addSaveableProperty(_submitTitle);
				addSaveableProperty(_correctAnswer);

				_fontSize.minimum = 10;
				_fontSize.maximum = 50;
				addProperty(_fontSize);

				// initial answers				
				addSaveableProperty(_answers);
				
				// initial feedbacks				
				addSaveableProperty(_feedbacks);
				
				// show display state
				toDisplayState();
			}
			
			
			override public function propertyValuesInitialised():void
			{
				currentFontSize = _fontSize.propValue;
				currentQuestion = _question.propValue;
				currentSubmitTitle = _submitTitle.propValue;
				currentCorrectAnswer = _correctAnswer.propValue;
				
				// one item should always be selected as the 'correct' answer
				if(isNaN(currentCorrectAnswer) || currentCorrectAnswer < 0)
					currentCorrectAnswer = 0;
				
				// copy array values into bindable collections
				// if no entries are available, we provide default values
				if(_answers.valueArray.length == 0)
				{
					answerCollection = new ArrayCollection(["Answer 1", "Answer 2", "Answer 3"]);
				}else{
					answerCollection = new ArrayCollection(_answers.valueArray.concat());
				}
				
				if(_feedbacks.valueArray.length == 0)
				{
					feedbackCollection = new ArrayCollection(["Feedback 1", "Feedback 2", "Feedback 3"]);
				}else{
					feedbackCollection = new ArrayCollection(_feedbacks.valueArray.concat());
				}
			}
			
			
			override public function editablePropertyUpdated(prop:IComponentProperty):void
			{
				// only the fontsize is editable via the properties panel
				switch(prop)
				{
					case _fontSize:
						currentFontSize = _fontSize.propValue;
						break;
				}
			}
			
			override public function prepareValuesForSave():void
			{
				saveAnswerFields();
				
				_submitTitle.propValue = currentSubmitTitle;
				_question.propValue = currentQuestion;
				_correctAnswer.propValue = currentCorrectAnswer;
				
				_answers.propValue = answerCollection.source.concat();
				_feedbacks.propValue = feedbackCollection.source.concat();
				
				// fontsize doesn't need updating as it's already an editable property
			}
			
				
			override public function destroy():void
			{
				// cleanup
				if(feedback)
				{
					feedback.removeEventListener(Feedback.FEEDBACKCHANGED,feedbackChanged);
					feedback = null;
				}
				
				result = null;
			}

			
			
			// Switch between Edit and Display states
			public function toggleState():void
			{
				if(currentState == "EditState")
				{
					toDisplayState();
				}else
				{
					toEditState();
				}
			}
		 	
			// Set currentState to Display state
			public function toDisplayState():void
			{
				currentState = "DisplayState";
			}
		 	
			// Set currentState to Edit state
			public function toEditState():void
			{
				currentState = "EditState";
			}
			 
			// Add new line of Answer (option) including the feedback!
			protected function onAddAnswer(evt:MouseEvent):void
			{
				// make sure array collection is currently storing correct elements
				saveAnswerFields();
				
				// add a new answer and a new feedback item
				var index:int = answerCollection.length + 1;
				
				answerCollection.addItem("Answer " + index);
				feedbackCollection.addItem("Feedback " + index);
			}

            // Submit an answer and recieve the feedback
			protected function onSubmitFeedback(evt:MouseEvent):void
			{
				result.show(this);
				
				if(_currentAnswer != -1 && _currentAnswer == currentCorrectAnswer){
					result.answerImage.source = tick;
				}
				 else{
					result.answerImage.source = cross;
				 }
				 
				result.text = feedbackCollection.getItemAt(_currentAnswer) as String;
			}
            
            // Modify the hidden component to the value of the new feedback (use the currentIndex set at editFeedback)
			public function feedbackChanged(evt:Event):void{
				// change the text area content   
				feedbackCollection.setItemAt(feedback.text, currentIndex);
				feedback.clickCancel();
			}

            // Edit a feedback
			protected function editFeedback(evt:MouseEvent):void
			{
				// the buttons 'data' property stores the index in the repeater
				currentIndex = Button(evt.target).data as int;
				feedback.show(this, feedbackCollection.getItemAt(currentIndex) as String);
			}

            // Delete and answer/feedback
			protected function deleteAnswer( event:MouseEvent ):void
			{ 
				// make sure all changes have been saved
				saveAnswerFields();
				
				var index:int = Button(event.target).data as int;
				
				// Use the same pointer to modify the answers and feedback arrays (they must always have same number of elements)
				// wrapped in try...catch block in case the index value is not valid
				try{
					
					answerCollection.removeItemAt(index);
					feedbackCollection.removeItemAt(index);

					// we need to update the 'correctAnswer' pointer to match
					if(currentCorrectAnswer == index)
						currentCorrectAnswer = -1;
					else if(currentCorrectAnswer > index)
						currentCorrectAnswer--;
					
				}catch(evt:Error){}
			}
			
			// show the feedback, delete buttons
			protected function showButtons(evt:FocusEvent):void
			{
				var index:int = (editAnswerArray as Array).indexOf(evt.currentTarget);

				var i:uint;
				var total:uint = editFeedbackArray.length;
				var moreThanOne:Boolean = (total > 1);
				
				for(i=0;i<total;i++)
				{
					editFeedbackArray[i].visible = (i == index);
					editDeleteArray[i].visible = moreThanOne && (i == index);
				}	
			}


			// hide the feedback, delete buttons
			protected function hideButtons():void
			{
				var uic:UIComponent;
				for each(uic in editFeedbackArray)
					uic.visible = false;
					
				for each(uic in editDeleteArray)
					uic.visible = false;
			}


			// Set the current answer (awaiting submission, edit mode)
			protected function editAnswerRadioSelect(evt:MouseEvent):void
			{
				
				var index:int = (editRadioArray as Array).indexOf(evt.target);
				
				if(index >= 0)
				{
					currentCorrectAnswer = index;
				}
			}
			
            // Enable the submit button once an answer has been chosen
			protected function displayAnswerRadioSelect(evt:MouseEvent):void
			{
				var index:int = (displayRadioArray as Array).indexOf(evt.target);
				
				if(index >= 0)
				{
					_currentAnswer = index;
				}
				
				submitButton.enabled = true;

			}

		// Change the mode of the component between edit (true) and display (false) modes 
		override public function setEditMode(f:Boolean):void{
		 if(f){
		 	toEditState();
		 } else {
		 	toDisplayState();
		 }
		}
		
		// Copy values of the controls to the properties
		protected function onExitEditState():void
		{
			 currentQuestion = questionEdit.text;
			 currentSubmitTitle = editableSubmitButton.label;
			 
			 // save text and selected answer from edit TextInputs into the collection
			 saveAnswerFields();
		}
		
		protected function saveAnswerFields():void
		{
			// only do this if currently in edit mode
			if(currentState != "EditState")
				return;
				
			// save answer texts
			var coll:ArrayCollection = new ArrayCollection();
			var ti:TextInput;
			
			for each(ti in editAnswerArray)
			{
				coll.addItem(ti.text);
			}
			
			answerCollection = coll;
		}
			
		]]>
	</mx:Script>

	<mx:Style>
		
		.editInput {
			background-alpha: 0;
			border-style: none;
			theme-color: #333333;
			focus-thickness: 1;
		}
		
		.feedbackButton {
			font-size: 9;
			font-weight: normal;
		}
		
		.deleteButton {
			font-size: 9;
			font-weight: normal;
			color: #ff0000;
			skin: Embed("org/glomaker/plugin/mcq/delete.png");
		}

		
	</mx:Style>

	<states>
		<mx:State name="DisplayState">
			<mx:AddChild position="lastChild">
				<mx:VBox width="100%" height="100%">
					<mx:RadioButtonGroup id="displayGroup"/>
					<mx:Text
						id="questionDisplay"
						fontSize="{currentFontSize}"
						selectable="false"
						width="100%"
						minHeight="25"
						text="{currentQuestion}"/>
						<mx:VBox width="100%" height="100%">
							<mx:Repeater id="answerDisplayRP" dataProvider="{answerCollection}">
								<mx:HBox verticalAlign="middle" height="100%">
									<mx:RadioButton id="displayRadioArray" fontSize="{currentFontSize}" groupName="displayGroup" click="displayAnswerRadioSelect(event)"/>
									<mx:Label width="100%" fontSize="{currentFontSize}" text="{answerDisplayRP.currentItem}"/>
								</mx:HBox>
							</mx:Repeater>
						</mx:VBox>
					<mx:Button id="submitButton" click="onSubmitFeedback(event)"  label="{currentSubmitTitle}" enabled="false"/>
				</mx:VBox>
			</mx:AddChild>
		</mx:State>
		  
		<mx:State name="EditState" exitState="onExitEditState()">
			<mx:AddChild position="lastChild">
				<mx:VBox width="100%" height="100%">
					<utils:DynamicTextArea
						id="questionEdit"
						styleName="editInput"
						fontSize="{currentFontSize}"
						width="100%"
						focusIn="hideButtons()"
						text="{currentQuestion}"
						minHeight="25"/>
						
					<mx:VBox width="100%" height="100%">	
						<mx:Repeater id="answerEditRP" dataProvider="{answerCollection}">
							<mx:HBox verticalAlign="middle" height="100%" width="100%">
								<mx:RadioButton id="editRadioArray" fontSize="{currentFontSize}" selected="{answerEditRP.currentIndex == currentCorrectAnswer}" click="editAnswerRadioSelect(event)"/>
								<mx:TextInput
									id="editAnswerArray"
									styleName="editInput"
									fontSize="{currentFontSize}"
									text="{String(answerEditRP.currentItem)}"
									width="100%"
									focusIn="showButtons(event)"
									/>
								<mx:Button
									data="{answerEditRP.currentIndex}"
									id="editFeedbackArray"
									styleName="feedbackButton"
									label="Feedback"
									click="editFeedback(event)"
									visible="false"/>
								<mx:Button
									styleName="deleteButton"
									id="editDeleteArray"
									buttonMode="true"
									data="{answerEditRP.currentIndex}"
									click="deleteAnswer(event)"
									visible="false"/>
							</mx:HBox>
						</mx:Repeater>
					</mx:VBox>
	             <mx:HBox>
	             	<editbutton:EditableButton id="editableSubmitButton" isEditable="true" label="{currentSubmitTitle}"/>
					 <mx:Button click="onAddAnswer(event)" label="Add Option"  />
				 </mx:HBox>
				</mx:VBox>
			</mx:AddChild>
		</mx:State>
	</states>
</BaseComponent>