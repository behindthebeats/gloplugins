<?xml version="1.0" encoding="utf-8"?>
<BaseComponent xmlns="org.glomaker.shared.component.*" xmlns:mx="http://www.adobe.com/2006/mxml" width="400" height="300" xmlns:accessviews="org.glomaker.plugin.accessviews.*"
	horizontalScrollPolicy="off" verticalScrollPolicy="off"
	currentState="DisplayState"
	 backgroundColor="#bbbbbb"
	 borderStyle="none"
	 borderColor="#87ceeb"
	 backgroundAlpha="0" 
>
<mx:Script>
        <![CDATA[
        	import mx.containers.VBox;
            // Code from Flex 3 Cookbook
            import mx.collections.ArrayCollection;
			
			[Bindable]
			[Embed(source="files/control_pause.png")]
			protected var pause:Class;
			
			[Bindable]
			[Embed(source="files/control_pause_blue.png")]
			protected var pauseb:Class;
			
			[Bindable]
			[Embed(source="files/control_pause_grey.png")]
			protected var pauseg:Class;
			
			[Bindable]
			[Embed(source="files/control_play.png")]
			protected var play:Class;
			
			[Bindable]
			[Embed(source="files/control_play_blue.png")]
			protected var playb:Class;
			
			[Bindable]
			[Embed(source="files/control_play_grey.png")]
			protected var playg:Class;
			
			[Bindable]
			[Embed(source="files/control_stop.png")]
			protected var stop:Class;
			
			[Bindable]
			[Embed(source="files/control_stop_blue.png")]
			protected var stopb:Class;
			
			[Bindable]
			[Embed(source="files/control_stop_grey.png")]
			protected var stopg:Class;
			
			[Bindable]
			[Embed(source="files/control_script.png")]
			protected var script:Class;
			
			[Bindable]
			[Embed(source="files/control_script_blue.png")]
			protected var scriptb:Class;
			
			[Bindable]
			[Embed(source="files/control_script_grey.png")]
			protected var scriptg:Class;
			
			protected var playPause:Boolean = true;
			
			// is this object selected
			[Bindable]
			protected var _selected:Boolean = false;
			
			public static const PLAY_PAUSE_EVENT:String = "SpeakerBox.PlayPause";
			public static const STOP_EVENT:String = "SpeakerBox.Stop";
			public static const SCRIPT_EVENT:String = "SpeakerBox.Script";
			public static const DELETE_EVENT:String = "SpeakerBox.Delete";
			
			[Bindable]
			public var speakerData:SpeakerData;
            
          	// List of all sounds related to each topic
			public var sounds:ArrayCollection = new ArrayCollection();
		
			// List of all the scripts related to each topic
			public var scripts:ArrayCollection = new ArrayCollection();

			// Reference to speakers titles array collection 
            private var _speakers:ArrayCollection;
            
            // Index of this object inside a repeater
            public var index:int;
            
            [Bindable]
            public var imageSource:String = "http://www.londonmet.ac.uk/ltri/staff/images_staff/pic_claire2.jpg";
            

            private function onDelete(event:MouseEvent):void   {
            	event.stopImmediatePropagation();
            	event.stopPropagation();
            	
            	dispatchEvent(new Event(DELETE_EVENT, true));
            }
            
            private function onScript(event:MouseEvent):void   {
            	event.stopImmediatePropagation();
            	event.stopPropagation();
            	
            	dispatchEvent(new Event(SCRIPT_EVENT, true));
            }
            
            private function stopPlayHandler(event:MouseEvent):void   {
            	event.stopImmediatePropagation();
            	event.stopPropagation();
            	
            	playPause = true;
            	
            	dispatchEvent(new Event(STOP_EVENT, true));

            	setPlayPausebuttonStyle();
            }
            
            private function playPauseHandler(event:MouseEvent):void
            {
            	event.stopImmediatePropagation();
            	event.stopPropagation();

                playPause = !playPause;
                
                dispatchEvent(new Event(PLAY_PAUSE_EVENT, true));

                setPlayPausebuttonStyle();
            }
            
            private function setPlayPausebuttonStyle():void{
            	
            	if(currentState != "DisplayState") 
            		return;
            	
            	 if(playPause){
                    pausePlayBtn.setStyle("icon",play);
                    pausePlayBtn.setStyle("overIcon",playb);
                } else {
                    pausePlayBtn.setStyle("icon",pause);
                    pausePlayBtn.setStyle("overIcon",pauseb);
                }
            }
            
                      	
            // Switch between Edit and Display states
			public function toggleState():void
			{
				if(currentState == "EditState")
				{
					toDisplayState();
				}else
				{
					toEditState();
				}
			}
		 	
			// Set currentState to Display state
			public function toDisplayState():void
			{
				currentState = "DisplayState";
			}
		 	
			// Set currentState to Edit state
			public function toEditState():void
			{
				currentState = "EditState";
			}
			
			// Change the mode of the component between edit (true) and display (false) modes 
			override public function setEditMode(f:Boolean):void{
			 if(f){
		 		toEditState();
			 } else {
			 	toDisplayState();
			 	setPlayPausebuttonStyle();
			 }
			 
			 titleTextArea.editable = titleTextArea.selectable = titleTextArea.focusEnabled = f;
				
			 // deselect text if switching out of edit mode
			 if(!f)
			 	titleTextArea.selectionBeginIndex = titleTextArea.selectionEndIndex = 0;
			 	
			}	
			
			// used as a property on the XML element
			public function set editMode(f:Boolean):void{
				setEditMode(f);
			}
			
			// Set this to selected, topic index as parameter!
			// Set to unselected if topicIndex == -1
			 public function set selected(ti:Boolean):void{
			 	_selected = ti;
			 	
			 	if(_selected){
			        	this.setStyle("backgroundAlpha","1");
			  }else {
			        	this.setStyle("backgroundAlpha","0");
			        	
			   playPause = true;
			   
			   setPlayPausebuttonStyle(); 
			   
			  }
            }
            
            public function get selected():Boolean{
            	return _selected;
            }
             
            public function addSound(ti:int,sound:String):void{
             
             if(ti>sounds.length)
            	 for(var i:int = sounds.length;i<ti;i++)            	 
            	 	sounds.addItem(null);
            	 	
            	sounds.addItem(sound);
            }
            
            public function addScript(ti:int,script:String):void{
            	if(ti>scripts.length)
            	 for(var i:int = scripts.length;i<ti;i++)            	 
            	 	scripts.addItem(null);
            	 	 
            	scripts.addItem(script);
            }
            
            public function getSound(topicIndex:int):String{
            	var ret:String = null;
            try{
            	if(topicIndex>=0 && topicIndex <= sounds.length)
            		ret = sounds.getItemAt(topicIndex) as String;
            } catch (r:Error){;}		
                return ret;
            }
            
            public function getScript(topicIndex:int):String{
            	var ret:String = null;
            try{
            	if(topicIndex>=0 && topicIndex <= sounds.length)
            		ret = scripts.getItemAt(topicIndex) as String;
            } catch (r:Error){;}		
                return ret;
            }
            
            public function enabledPlay(b:Boolean):void{
            	if(currentState == "DisplayState"){
            		pausePlayBtn.enabled = b;
            		stopPlayBtn.enabled = b;
            	}
            }
            
            public function getSpeakerData():SpeakerData{
            	return new SpeakerData(titleTextArea.text);
            }

                   

        ]]>
    </mx:Script>	
    
<mx:TextArea id="titleTextArea"  text="{speakerData.title}" width="100%" backgroundAlpha="0" textAlign="center" fontSize="14" fontWeight="bold" borderStyle="none"  enabled="{_selected}" disabledColor="black"/>
<states>
      <mx:State name="DisplayState">
            <mx:AddChild position="lastChild">
                  <mx:VBox horizontalAlign="center" width="100%" height="100%">
                        <mx:HBox backgroundColor="red">
                              <mx:Image id="speakerImage" width="100%" maintainAspectRatio="true" source="{speakerData.imageSource}"/>
                        </mx:HBox>
                        <mx:HBox horizontalGap="8" visible="{_selected}">
                              <mx:Button id="pausePlayBtn" click="playPauseHandler(event) " disabledIcon="{playg}" overIcon="{playb}" icon="{play}" width="16" height="16"/>
                              <mx:Button id="stopPlayBtn"  click="stopPlayHandler(event)" disabledIcon="{stopg}" overIcon="{stopb}" icon="{stop}" width="16" height="16"/>
                              <mx:Button disabledIcon="{scriptg}" overIcon="{scriptb}"  click="onScript(event)" icon="{script}" width="16" height="16"/>
                        </mx:HBox>
                  </mx:VBox>
            </mx:AddChild>
      </mx:State>
      
      <mx:State name="EditState">
            <mx:AddChild position="lastChild">
                  <mx:VBox horizontalAlign="center" width="100%" height="100%">
                        <mx:HBox>
                              <mx:Image width="100%" maintainAspectRatio="true" source="{speakerData.imageSource}"/>
                        </mx:HBox>
                        <mx:HBox horizontalGap="8" visible="{_selected}">
                              <mx:Button id="edit" label=" Delete " height="16" click="onDelete(event)"/>
                        </mx:HBox>
                  </mx:VBox>
            </mx:AddChild>
      </mx:State>
</states>


</BaseComponent>

